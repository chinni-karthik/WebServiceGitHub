1-Any service that can be accessed over web is called as a web-service.
2-But, there is a difference bteween a web-service and a web-site. web-site is meant for the users to use, where web-service is for the fellow developers.
3-The web-service is programming language independent.
4-There are two types of web-service. SOAP and REST. Respective specifications are JAX-WS and JAX-RS.
-----------------------------------------------------------------------------------
web-service terms:-
1-Say you have impl classes and you need to share those to consumer classes(say the consumer is developed by other team.). How do you share the impl classes?
  Simple way to share is to share via an interface. This interface contains the contract of how consumer should your impl classes. The consumer makes a call to impl via interface.
2-Does this work for web-service? probably not as the consumer may be in c++ and the impl/server may be in java.
3-To solve this problem, the interface here is xml as it is language independent. 
4-The interface here is named as the WSDL that serves a contract between the the server and client web-service applicaton.
5-UDDI:- client needs a wsdl. where it gets it form? it is from UDDI, where the web-service is registered after its creation.
6-SOAP:- Say my server is in java and client is in c++. the data types used in both languages is different(like java string is different from c++ string).How can this be handled? simple, by exchanging in xml format. The spec that specifies how to exchange is SOAP. it is a protocol telling how to access the data by client and server.
7-SEI:- how the language specific objects are converted to SOAP? it is by SEI. This can be generated and client uses it to make call to server . This converts language specific objects to a soap message!

-----------------------------------------------------------------------------------
Creating web-service clinet:-

1-Say, you need to call a method of a service from your main method, you directly call it from the referenceVariable.service();
  But, here this is not possible as we need to make a remote call. How do we do that??
  Simple, we need to have the wsdl, using wsdl, we need to create stubs(we are speaking about SEI), on the stub, we need to call the method, like we normally call a method.
2-wsimport web-service url;-->> use this command to generate the class files of the stub.(you can even retain the code generated by using options of that command)

-----------------------------------------------------------------------------------
1-import the java files and paste them into the corresponding package in eclipse.
2-non, out of various java classes, where is stub?--> goto wsdl, goto service in it and use the corresponding two classes. In this case it is GeoIPService.java and GeoIPServiceSoap.java
3-Now, just see the client that is created and you now know the way to get stub.
4-using stub, get the country name...!!!
Thats it...!!!
-----------------------------------------------------------------------------------

1-now set up tomcat to your eclipse.
2-create a dynamic web project and write a simmple java class (ProductCatalogue.java) that has getProducts() method as done in example.

Converting ProductCatalogue.java into a web-service:-
1-@WebService annotation that you want a class to be web-service.
Thats it...!!! No second step...!!!
Not access that with manager application and you can find the link to the webservice you created. you can get wsdl as well.

If webservice is very simple to work with one annotation, where is there actually to learn??

There are scenarios where @Webservice is not sufficient.

Lets go back by some time. lets say you need to write interface and impl classes. What do you write first ? Obviously, it is the interface.
In out webservice development, interface is WSDL as discussed already. Now, if we revice the process of developing webservice by using @Webservice, we notice that we do the other way around, i.e. generate wsdl based on the class we write.

Can we reverse the process??
i.e. wsdl-->>serviceImpl.java

two says:- service first(ideal way to learn web-service) and contract first(in production env where changing wsdl means a lot).


Understanding WSDL:-
PortType-->> the java class that is a webservice
operation-->> this is inside portType. it tells the method name.
types-->>if any cstom data types are used in our interface analogy, we specify it in types 
binding-->>how the service accepts requests and gives response(like http).

10 done. 10 more.
-----------------------------------------------------------------------------------

Namespace in xml is equivalant to package in java. like when you are saying TargetNamespase, you are gouping the tags in that package.
when deriving the wsdl, the package is reversed and targetNamespace is derived like that...!!!
When the annotation properties are changed, we can see the corresponding change in the wsdl.
Nothing more to remember as of now.